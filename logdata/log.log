2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:57 INFO 开始执行测试用例: rack-系统电压  128
2025-04-24 08:56:57 DEBUG 开始数据库操作  55
2025-04-24 08:56:57 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 32, 'count': 1, 'slave': 1, 'function_code': 3, 'datatype': 0, 'dataformat': 0}  100
2025-04-24 08:56:57 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:57 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData0]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F97A00A50>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'BV', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F97A00A50>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'BV', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F97A00A50>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'BV', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.08568989997729659  21
2025-04-24 08:56:58 INFO **************************************  22
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 INFO 开始执行测试用例: rack-系统电流  128
2025-04-24 08:56:58 DEBUG 开始数据库操作  55
2025-04-24 08:56:58 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 33, 'count': 1, 'slave': 1, 'function_code': 3, 'datatype': 0, 'dataformat': 0}  100
2025-04-24 08:56:58 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData1]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F97A01310>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'Bcc', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F97A01310>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'Bcc', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F97A01310>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'Bcc', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.08774620000622235  21
2025-04-24 08:56:58 INFO **************************************  22
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 INFO 开始执行测试用例: rack-SOC  128
2025-04-24 08:56:58 DEBUG 开始数据库操作  55
2025-04-24 08:56:58 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 34, 'count': 1, 'slave': 1, 'function_code': 3, 'datatype': 0, 'dataformat': 0}  100
2025-04-24 08:56:58 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData2]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F978CB360>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'SOC', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F978CB360>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'SOC', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F978CB360>
CaseData = {'Expected_result': '测试失败: Modbus Error: [Connection] Failed to connect[ModbusTcpClient 127.0.0.1:602]', 'ModbusResult': None, 'Mongomysqlresult': None, 'Mysql/Mongo': 'SOC', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.12154150000424124  21
2025-04-24 08:56:58 INFO **************************************  22
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 INFO 开始执行测试用例: PCS-累积交流充电电量高低位  128
2025-04-24 08:56:58 DEBUG 开始数据库操作  55
2025-04-24 08:56:58 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 33, 'count': 2, 'slave': 1, 'function_code': 4, 'datatype': 1, 'dataformat': 1}  100
2025-04-24 08:56:58 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData3]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F97A1DBA0>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'InTotal', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F97A1DBA0>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'InTotal', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F97A1DBA0>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'InTotal', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.12541830001282506  21
2025-04-24 08:56:58 INFO **************************************  22
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 INFO 开始执行测试用例: PCS-累积交流放电电量高低位  128
2025-04-24 08:56:58 DEBUG 开始数据库操作  55
2025-04-24 08:56:58 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 31, 'count': 2, 'slave': 1, 'function_code': 4, 'datatype': 1, 'dataformat': 1}  100
2025-04-24 08:56:58 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData4]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F979F3650>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'OutTotal', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F979F3650>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'OutTotal', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F979F3650>
CaseData = {'Expected_result': 0, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'OutTotal', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.08852949997526594  21
2025-04-24 08:56:58 INFO **************************************  22
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 ERROR Connection to (None, None) failed: [Errno 11001] getaddrinfo failed  200
2025-04-24 08:56:58 INFO 开始执行测试用例: PCS-直流电压  128
2025-04-24 08:56:58 DEBUG 开始数据库操作  55
2025-04-24 08:56:58 INFO Modbus连接参数: {'ip': None, 'port': None, 'address': 1, 'count': 1, 'slave': 1, 'function_code': 4, 'datatype': 0, 'dataformat': 0}  100
2025-04-24 08:56:58 ERROR Modbus处理异常  121
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 CRITICAL 用例执行失败  185
Traceback (most recent call last):
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 145, in test_001
    modbus_result = self.__modbus_processing(CaseData)
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 122, in __modbus_processing
    raise e
  File "D:\PycharmProjects\TaokeEms\testcase\test_run.py", line 104, in __modbus_processing
    modbus_params[param] = int(modbus_params[param])
                           ~~~^^^^^^^^^^^^^^^^^^^^^^
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
2025-04-24 08:56:58 INFO 用例ID：testcase/test_run.py::TestCase::test_001[CaseData5]  17
2025-04-24 08:56:58 INFO 测试结果：failed  18
2025-04-24 08:56:58 INFO 故障表示：self = <test_run.TestCase object at 0x0000020F979DC160>
CaseData = {'Expected_result': 23.3, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'VpvList', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
>           modbus_result = self.__modbus_processing(CaseData)

testcase\test_run.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testcase\test_run.py:122: in __modbus_processing
    raise e
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_run.TestCase object at 0x0000020F979DC160>
CaseData = {'Expected_result': 23.3, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'VpvList', ...}

    def __modbus_processing(self, CaseData) -> float:
        """Modbus数据处理与计算"""
        try:
            # 从Excel用例获取Modbus参数
            modbus_params = {
                'ip': CaseData['ip'],
                'port': CaseData['port'],
                'address': CaseData['address'],
                'count': CaseData['count'],
                'slave': CaseData['slave'],
                'function_code': CaseData['function_code'],
                'datatype': CaseData.get('datatype'),
                'dataformat': CaseData.get('dataformat')
            }
            modbus_logger.info(f"Modbus连接参数: {modbus_params}")
    
            # 类型转换关键参数
            for param in ['port', 'address', 'count', 'slave', 'function_code']:
>               modbus_params[param] = int(modbus_params[param])
E               TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:104: TypeError

During handling of the above exception, another exception occurred:

self = <test_run.TestCase object at 0x0000020F979DC160>
CaseData = {'Expected_result': 23.3, 'ModbusResult': None, 'Mongomysqlresult': 'Error（类型错误：could not convert string to float: "语法错误: invalid character \'：\' (U+FF1A) (<unknown>, line 1)"）', 'Mysql/Mongo': 'VpvList', ...}
modbus_client = {}

    @pytest.mark.parametrize("CaseData", AllCaseData)
    def test_001(self, CaseData,modbus_client):
        logging.info(f"开始执行测试用例: {CaseData['Title']}")
        # self.dynamic_title(CaseData)
        # 写入结果配置
        row = CaseData["id"]
        DB_RESULT_COL = 20
        MODBUS_RESULT_COL = 15
    
        try:
            #数据库结果处理
            db_result = self.__mysql_mongodb_extraction(CaseData)
            FileDataDriver.writeDataToExcel(
                row = row,
                column = DB_RESULT_COL,
                value = str(db_result)[:255] #限制写入字符长度
            )
    
            # Modbus数据处理
            modbus_result = self.__modbus_processing(CaseData)
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=modbus_result
            )
            logging.debug(f"数据库查询结果: {db_result}")
            logging.debug(f"Modbus提取结果: {modbus_result}")
    
            # 断言处理逻辑
            ASSERT_RESULT_COL = 21   #写入列号
            try:
                # 类型统一处理
                db_num = float(db_result) if isinstance(db_result, (int, float, str)) else None
                modbus_num = float(modbus_result)
    
                if db_num is None:
                    assert_result = "Skip（无数据库结果）"
                elif abs(db_num - modbus_num) <= 0.001:  # 允许千分之一的误差
                    assert_result = "Pass"
                else:
                    assert_result = f"Fail（差值：{abs(db_num - modbus_num):.4f}）"
    
            except (ValueError, TypeError) as e:
                assert_result = f"Error（类型错误：{str(e)}）"
            except Exception as e:
                assert_result = f"Error（未知错误：{str(e)}）"
    
            # 写入断言结果
            FileDataDriver.writeDataToExcel(
                row=row,
                column=ASSERT_RESULT_COL,
                value=assert_result
            )
            # 触发pytest断言
            if "Fail" in assert_result:
                pytest.fail(assert_result)
    
        except Exception as e:
            error_msg = f"测试失败: {str(e)}"
            logging.critical("用例执行失败", exc_info=True)
            # 同时写入两个结果列
            FileDataDriver.writeDataToExcel(
                row=row,
                column=DB_RESULT_COL,
                value=error_msg
            )
            FileDataDriver.writeDataToExcel(
                row=row,
                column=MODBUS_RESULT_COL,
                value=error_msg
            )
>           pytest.fail(error_msg)
E           Failed: 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'

testcase\test_run.py:197: Failed  19
2025-04-24 08:56:58 INFO 异常：<ExceptionInfo 测试失败: int() argument must be a string, a bytes-like object or a real number, not 'NoneType' tblen=29>  20
2025-04-24 08:56:58 INFO 用例耗时：0.07283849999657832  21
2025-04-24 08:56:58 INFO **************************************  22
